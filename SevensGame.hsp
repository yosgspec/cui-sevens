#runtime "hsp3cl"
#cmpopt varinit 1

;全自動モード
#const AUTO_MODE 0
;プレイヤー人数
#const PLAYER_NUMBER 4
;パス回数
#const PASS_NUMBER 3

;トランプカードモジュール
suitStrs@TrumpCard="▲","▼","◆","■","Jo","JO"
powerStrs@TrumpCard="Ａ","２","３","４","５","６","７","８","９","10","Ｊ","Ｑ","Ｋ","KR"
#module TrumpCard name,suit,power
	#modcfunc tcName
		return name
	#modcfunc tcPower
		return power
	#modcfunc tcSuit
		return suit

	#define news(%1,%2,%3) newmod %1,TrumpCard,%2,%3
	#modinit int _suit,int _power
		name=suitStrs(_suit)+powerStrs(_power)
		power=_power
		suit=_suit
	return
#global

;トランプの束モジュール
#module TrumpDeck g,i,deck,count,hash
	#const suits 4
	#const powers 13

	#modcfunc tdCount
		return count

	#define new(%1) dimtype %1,5:newmod %1,TrumpDeck
	#modinit
		randomize
		cardIndex=0

		#define newCard(%1,%2) \
			news@TrumpCard deck,%1,%2 :\
			hash(cardIndex)=cardIndex :\
			cardIndex++

		repeat suits
			suit=cnt
			repeat powers
				newCard suit,cnt
			loop
		loop

		/* Joker
		newCard 4,powers
		newCard 5,powers
		*/
		count=cardIndex

		newlab g,1:return
		gosub*trumpIter
	return

	#modfunc tdShuffle
		foreach deck
			r=rnd(count)
			tmp=hash(cnt)
			hash(cnt)=hash(r)
			hash(r)=tmp
		loop
	return

	*trumpIter
		for i,0,count
			_card=deck(hash(i))
			newlab g,1:return
		next
	return

	#modfunc local tdDraw var card
		gosub g
		card=_card
	return
	#define global tdDraw(%1,%2) dimtype %2,5:tdDraw@TrumpDeck %1,%2
#global

;プレイヤーモジュール
#module Player deck,deckCount,isGameOut,name
	#modcfunc plName
		return name
	#modcfunc plIsGameOut
		return plIsGameOut
	#modfunc plRefDeck array _deck
		if deckCount!=0 {
			dimtype _deck,5,deckCount
			repeat deckCount
				_deck(cnt)=deck(cnt)
			loop
		}
		else: dim _deck
	return

	#define news(%1,%2) newmod %1,Player,%2
	#modinit str _name
		super@Player thismod,_name
	return
	#modfunc local super str _name
		name=_name
		deckCount=0
		isGameOut=0
	return

	#modfunc plSortDeck
		repeat deckCount
			i=cnt
			repeat deckCount-i,i
				#define ctype sortValue(%1) tcSuit(deck(%1))*13+tcPower(deck(%1))
				if sortValue(cnt)<sortValue(i) {
					tmp=deck(i)
					deck(i)=deck(cnt)
					deck(cnt)=tmp
				}
			loop
		loop
	return

	#modfunc plAddCard var card
		deck(deckCount)=card
		deckCount++
	return

	#modfunc plRemoveCard str cardName
		repeat deckCount
			if tcName(deck.cnt)=cardName {
				delID=cnt
				repeat deckCount-delID-1
					deck(delID+cnt)=deck(delID+cnt+1)
				loop
				deckCount--
				break
			}
		loop
	return

	#modcfunc plExistCard str cardName
		existCard=-1
		repeat deckCount
			if tcName(deck.cnt)=cardName {
				existCard=cnt
				break
			}
		loop
	return existCard

	#modfunc plGameOut
		isGameOut=1
	return
#global

;カーソル選択モジュール
#module @SelectCursor
	#uselib "crtdll"
	#cfunc getch "_getch"

	;カーソルの移動
	#deffunc local move int x,int max
		cursor+=x
		if cursor<0: cursor=0
		if max-1<cursor: cursor=max-1
	return

	#defcfunc SelectCursor array items
		cursor=0
		goto*begin

		;カーソルの表示
		*view
			dim select,length(items)
			select(cursor)=1
			s=""
			foreach items
				if select(cnt): s+=strf("[%s]",items(cnt)): else: s+=items(cnt)
			loop
			mes strf("%s\r",s),1
		return

		*begin
		gosub*view
		repeat
			ch=getch()
			if ch=$0d {
				mes
				break
			}
			if ch=$e0 {
				ch=getch()
				if ch=$4b: move -1,length(items)	;左
				if ch=$4d: move 1,length(items) 	;右
			}
			gosub*view
		loop
	return cursor
#global

;七並べプレイヤーモジュール
#module SevensPlayer deck,deckCount,isGameOut,name,pass,selectCardFn
	#modcfunc splPass
		return pass

	#define news(%1,%2,%3) newmod %1,SevensPlayer,%2,%3
	#modinit str _name,int _pass
		super thismod,_name,_pass
		selectCardFn=*selectCard
	return
	#modfunc local super str _name,int _pass
		super@Player thismod,_name
		pass=_pass
	return

	#modfunc splSelectCard var _field,int _index
		field=_field:index=_index
		gosub selectCardFn
	return

	*selectCard
		if isGameOut: return
		if 1!svCheckPlayNext(field,thismod) {
			svGameOver field,thismod,index
			svView field
			mes name+" GameOver...\n"
			return
		}

		mes strf("【%s】Cards: %d Pass: %d",name,deckCount,pass)
		sdim items
		repeat deckCount
			items(cnt)=tcName(deck.cnt)
		loop
		if 0<pass: items(deckCount)="PS:"+pass

		repeat
			cursor=SelectCursor(items)

			if 0<pass & length(items)-1=cursor {
				pass--
				svView field
				mes strf("残りパスは%d回です。\n",pass)
				break
			}
			else:if svTryUseCard(field,thismod,deck(cursor)) {
				svView field
				mes strf("俺の切り札!! >「%s」\n",items(cursor))
				if deckCount=0 {
					mes name+" Congratulations!!\n"
					svGameClear field,thismod,index
				}
				break
			}
			else {
				mes "そのカードは出せないのじゃ…\n"
				continue
			}
		loop
	return
#global

;七並べAIプレイヤーモジュール
#module SevensAIPlayer deck,deckCount,isGameOut,name,pass,selectCardFn
	#define ctype me(%1) %1@SevensPlayer
	#define field field@SevensPlayer
	#define index index@SevensPlayer

	#define news(%1,%2,%3) newmod %1,SevensAIPlayer,%2,%3
	#modinit str _name,int _pass
		super@SevensPlayer thismod,_name,_pass
		selectCardFn=*selectCard
	return

	*selectCard
		if me(isGameOut): return
		if 1!svCheckPlayNext(field,thismod) {
			svGameOver field,thismod,index
			svView field
			mes me(name)+"> もうだめ...\n"
			return
		}

		mes strf("【%s】Cards: %d Pass: %d",me(name),me(deckCount),me(pass))
		sdim items
		repeat me(deckCount)
			items(cnt)=tcName(me(deck).cnt)
		loop
		if 0<me(pass): items(me(deckCount))="PS:"+me(pass)

		mes "考え中...\r",1
		wait 100

		passCharge=0
		repeat
			cursor=rnd(length(items))

			if 0<me(pass) & length(items)-1=cursor {
				if passCharge<3 {
					passCharge++
					continue
				}
				me(pass)--
				mes strf("パスー (残り%d回)\n",me(pass))
				break
			}
			else:if svTryUseCard(field,thismod,me(deck).cursor) {
				mes strf("これでも食らいなっ >「%s」\n",items(cursor))
				if me(deckCount)=0 {
					mes me(name)+"> おっさき〜\n"
					svGameClear field,thismod,index
				}
				break
			}
			else :continue
		loop
	return
#global

;トランプの場モジュール
#module TrumpField deck,deckCount
	#define new(%1) dimtype %1,5:newmod %1,TrumpField
	#modfunc tfUseCard var _player,var card
		deck(deckCount)=card
		plRemoveCard _player,tcName(card)
		deckCount++
	return

	#define global tfSortDeck(%1) plSortDeck %1

	#modfunc tfView
		joinStr=""
		foreach deck
			if cnt!=0: joinStr+=" "
			joinStr+=tcName(deck.cnt)
		loop
		mes joinStr
	return
#global

;七並べの列モジュール
#module SevensLine cardLine
	#const jokerIndex 13
	#const sevenIndex 6
	#modfunc slRefCardLine array _cardLine
		dimtype _cardLine,5,length(cardLine)
		foreach cardLine
			_cardLine(cnt)=cardLine(cnt)
		loop
	return

	#define news(%1) newmod %1,SevensLine
	#modinit
		dim cardLine,13
		cardLine(sevenIndex)=1
	return

	#modcfunc rangeMin
		i=sevenIndex
		repeat sevenIndex
			i--
			if 1!cardLine(i): break
		loop
	return i

	#modcfunc rangeMax
		i=sevenIndex
		repeat sevenIndex,sevenIndex
			i++
			if 1!cardLine(i): break
		loop
	return i

	#modcfunc slCheckUseCard int power
		switch power
			case jokerIndex
				return 1
			case rangeMin(thismod)
			case rangeMax(thismod)
				return 1
		swend
	return 0

	#modfunc slUseCard int power
		cardLine(power)=1
	return
#global

;七並べモジュール
#module Sevens deck,deckCount,lines,rank,clearCount
	#define new(%1,%2) dimtype %1,5:newmod %1,Sevens,%2
	#modinit array players
		dimtype lines,5,4
		repeat length(lines)
			news@SevensLine lines
		loop

		dimtype _deck,5
		dim rank,length(players)
		clearCount=0
		#const tenhoh $FF

		repeat 4
			cardSevenName=suitStrs@TrumpCard(cnt)+powerStrs@TrumpCard(6)
			foreach players
				p=players.cnt
				cardSevenIndex=plExistCard(p,cardSevenName)
				if -1<cardSevenIndex {
					plRefDeck p,_deck
					card=_deck(cardSevenIndex)
					mes strf("%s が%sを置きました。",plName(p),tcName(card))
					tfUseCard thismod,p,card
					if length(_deck)=0 {
						mes plName(p)+" 【-- 天和 --】\n"
						rank(cnt)=tenhoh
						plGameOut p
					}
					break
				}
			loop
		loop
		mes
	return

	#define svUseCard(%1,%2) \
		slUseCard lines(tcSuit(%2)),tcPower(%2) :\
		tfUseCard thismod,%1,%2

	#define ctype svCheckUseCard(%1) \
		slCheckUseCard(lines(tcSuit(%1)),tcPower(%1))

	#modcfunc svTryUseCard var _player,var _card
		if 1!svCheckUseCard(_card): return 0
		svUseCard _player,_card
	return 1

	#modcfunc svCheckPlayNext var _player
		if 0<splPass(_player): return 1
		dimtype _deck,5
		plRefDeck _player,_deck
		isPlayGame=0
		foreach _deck
			if svCheckUseCard(_deck.cnt) {
				isPlayGame=1
				break
			}
		loop
	return isPlayGame

	#modfunc svGameClear var _player,int index
		clearCount++
		rank(index)=clearCount
		plGameOut _player
	return

	#modfunc svGameOver var _player,int index
		rank(index)=-1
		dimtype _deck,5
		plRefDeck _player,_deck
		deckLen=length(_deck)
		repeat deckLen,1
			svUseCard _player,_deck(deckLen-cnt)
		loop
		plGameOut _player
	return

	#modcfunc svCheckGameEnd
		isGameEnd=1
		foreach rank
			if rank(cnt)=0 {
				isGameEnd=0
				break
			}
		loop
	return isGameEnd

	#modfunc svView
		dim cardLine,13
		s=""
		foreach lines
			i=cnt
			ss=""
			slRefCardLine lines(i),cardLine
			repeat 13
				if cardLine(cnt) {
					s+=suitStrs@TrumpCard(i)
					ss+=powerStrs@TrumpCard(cnt)
				}
				else {
					s+="◇"
					ss+="◇"
				}
			loop
			s+="\n"+ss+"\n"
		loop
		mes s
	return

	#modfunc svResult array players
		mes "\n【Game Result】"
		foreach rank
			if rank(cnt)=tenhoh {
				rankStr="天和"
			}
			else:if 0<rank(cnt) {
				rankStr=strf("%d位",rank.cnt)
			}
			else {
				rankStr="GameOver..."
			}
			mes strf("%s: %s",plName(players.cnt),rankStr)
		loop
	return
#global

;メイン処理
#module Program
	#deffunc main
		repeat 100
			mes
		loop
mes {"
/---------------------------------------/
/                 七並べ                /
/---------------------------------------/

"}

		new@TrumpDeck trp
		tdShuffle trp

		dimtype p,5,PLAYER_NUMBER@
		#if 1!AUTO_MODE@
			news@SevensPlayer p,"Player",PASS_NUMBER@
		#endif

		repeat PLAYER_NUMBER@-(1!AUTO_MODE@),1
			news@SevensAIPlayer p,"CPU "+cnt,PASS_NUMBER@
		loop

		repeat tdCount(trp)
			tdDraw trp,card
			plAddCard p(cnt\PLAYER_NUMBER@),card
		loop

		foreach p
			plSortDeck p(cnt)
		loop

		new@Sevens field,p

		dimtype deck,5
		*selectLoop
			svView field
			foreach p
				splSelectCard p(cnt),field,cnt
				if svCheckGameEnd(field): goto*exitSelect
			loop
		goto*selectLoop
		*exitSelect

		svView field
		svResult field,p
		sdim exit
		input exit,,1
	return
#global
main
